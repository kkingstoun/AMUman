openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/gpus/:
    get:
      operationId: gpus_list
      tags:
      - gpus
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gpus'
          description: ''
    post:
      operationId: gpus_create
      tags:
      - gpus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gpus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Gpus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Gpus'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gpus'
          description: ''
  /api/gpus/{id}/:
    get:
      operationId: gpus_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this gpu.
        required: true
      tags:
      - gpus
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gpus'
          description: ''
    delete:
      operationId: gpus_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this gpu.
        required: true
      tags:
      - gpus
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/jobs/:
    get:
      operationId: jobs_list
      tags:
      - jobs
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
          description: ''
    post:
      operationId: jobs_create
      tags:
      - jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Job'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
  /api/jobs/{id}/:
    get:
      operationId: jobs_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - jobs
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    put:
      operationId: jobs_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Job'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    patch:
      operationId: jobs_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedJob'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedJob'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedJob'
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    delete:
      operationId: jobs_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - jobs
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/jobs/{id}/output/:
    get:
      operationId: jobs_output_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - jobs
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/output'
          description: ''
  /api/jobs/{id}/start/:
    post:
      operationId: jobs_start_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Job'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
  /api/manager-settings/{id}/:
    patch:
      operationId: manager_settings_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this manager settings.
        required: true
      tags:
      - manager-settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedManagerSettings'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedManagerSettings'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedManagerSettings'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagerSettings'
          description: ''
  /api/nodes/:
    get:
      operationId: nodes_list
      tags:
      - nodes
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nodes'
          description: ''
    post:
      operationId: nodes_create
      tags:
      - nodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Nodes'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Nodes'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Nodes'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nodes'
          description: ''
  /api/nodes/{id}/:
    get:
      operationId: nodes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this node.
        required: true
      tags:
      - nodes
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nodes'
          description: ''
    delete:
      operationId: nodes_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this node.
        required: true
      tags:
      - nodes
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/nodes/refresh/:
    post:
      operationId: nodes_refresh_create
      tags:
      - nodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshNode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefreshNode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefreshNode'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshNode'
          description: ''
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    ConnectionStatusEnum:
      enum:
      - CONNECTED
      - DISCONNECTED
      type: string
      description: |-
        * `CONNECTED` - CONNECTED
        * `DISCONNECTED` - DISCONNECTED
    GpuPartitionEnum:
      enum:
      - SLOW
      - NORMAL
      - FAST
      - UNDEF
      type: string
      description: |-
        * `SLOW` - SLOW
        * `NORMAL` - NORMAL
        * `FAST` - FAST
        * `UNDEF` - UNDEF
    Gpus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        node:
          type: integer
          description: The associated node ID.
        device_id:
          type: integer
          maximum: 32767
          minimum: 0
          format: int64
          description: The unique device identifier (must be <= 32767).
        uuid:
          type: string
          format: uuid
          description: The unique identifier of the GPU.
        model:
          type: string
        speed:
          $ref: '#/components/schemas/SpeedEnum'
        util:
          type: integer
          maximum: 100
          minimum: 0
          format: int64
          description: The utilization of the GPU (must be <= 100).
        is_running_amumax:
          type: boolean
        status:
          $ref: '#/components/schemas/GpusStatusEnum'
        last_update:
          type: string
          format: date-time
          readOnly: true
          description: The timestamp of the last update (read-only, auto-generated).
      required:
      - device_id
      - id
      - last_update
      - model
      - node
      - util
      - uuid
    GpusStatusEnum:
      enum:
      - RUNNING
      - PENDING
      - RESERVED
      - UNAVAILABLE
      type: string
      description: |-
        * `RUNNING` - RUNNING
        * `PENDING` - PENDING
        * `RESERVED` - RESERVED
        * `UNAVAILABLE` - UNAVAILABLE
    Job:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        path:
          type: string
          maxLength: 500
        port:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        submit_time:
          type: string
          format: date-time
          nullable: true
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        error_time:
          type: string
          format: date-time
          nullable: true
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        gpu_partition:
          $ref: '#/components/schemas/GpuPartitionEnum'
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        flags:
          type: string
          nullable: true
          maxLength: 150
        user:
          type: string
          maxLength: 150
        node:
          type: integer
          nullable: true
        gpu:
          type: integer
          nullable: true
      required:
      - id
      - path
      - user
    JobStatusEnum:
      enum:
      - PENDING
      - FINISHED
      - INTERRUPTED
      type: string
      description: |-
        * `PENDING` - PENDING
        * `FINISHED` - FINISHED
        * `INTERRUPTED` - INTERRUPTED
    ManagerSettings:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        queue_watchdog:
          type: boolean
      required:
      - id
    Nodes:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        ip:
          type: string
        name:
          type: string
          maxLength: 15
        number_of_gpus:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        status:
          $ref: '#/components/schemas/NodesStatusEnum'
        connection_status:
          $ref: '#/components/schemas/ConnectionStatusEnum'
        last_seen:
          type: string
          format: date-time
      required:
      - id
      - ip
      - name
      - number_of_gpus
    NodesStatusEnum:
      enum:
      - PENDING
      - RESERVED
      - UNAVAILABLE
      type: string
      description: |-
        * `PENDING` - PENDING
        * `RESERVED` - RESERVED
        * `UNAVAILABLE` - UNAVAILABLE
    PatchedJob:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        path:
          type: string
          maxLength: 500
        port:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        submit_time:
          type: string
          format: date-time
          nullable: true
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        error_time:
          type: string
          format: date-time
          nullable: true
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        gpu_partition:
          $ref: '#/components/schemas/GpuPartitionEnum'
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        flags:
          type: string
          nullable: true
          maxLength: 150
        user:
          type: string
          maxLength: 150
        node:
          type: integer
          nullable: true
        gpu:
          type: integer
          nullable: true
    PatchedManagerSettings:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        queue_watchdog:
          type: boolean
    PriorityEnum:
      enum:
      - LOW
      - NORMAL
      - HIGH
      type: string
      description: |-
        * `LOW` - LOW
        * `NORMAL` - NORMAL
        * `HIGH` - HIGH
    RefreshNode:
      type: object
      properties:
        node_id:
          type: integer
    SpeedEnum:
      enum:
      - SLOW
      - NORMAL
      - FAST
      type: string
      description: |-
        * `SLOW` - SLOW
        * `NORMAL` - NORMAL
        * `FAST` - FAST
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    output:
      type: object
      properties:
        output:
          type: string
      required:
      - output
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
