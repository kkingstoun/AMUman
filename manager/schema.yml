openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/gpus/:
    get:
      operationId: gpus_list
      tags:
      - gpus
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gpus'
          description: ''
  /api/gpus/{id}/:
    get:
      operationId: gpus_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this gpus.
        required: true
      tags:
      - gpus
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gpus'
          description: ''
  /api/jobs/:
    get:
      operationId: jobs_list
      tags:
      - jobs
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
          description: ''
    post:
      operationId: jobs_create
      tags:
      - jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Job'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Job'
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
  /api/jobs/{id}/:
    get:
      operationId: jobs_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - jobs
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    put:
      operationId: jobs_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Job'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Job'
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    patch:
      operationId: jobs_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - jobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedJob'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedJob'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedJob'
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    delete:
      operationId: jobs_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this job.
        required: true
      tags:
      - jobs
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/manager-settings/:
    get:
      operationId: manager_settings_list
      tags:
      - manager-settings
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MS'
          description: ''
    post:
      operationId: manager_settings_create
      tags:
      - manager-settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MS'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MS'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MS'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MS'
          description: ''
  /api/manager-settings/{id}/:
    get:
      operationId: manager_settings_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this manager settings.
        required: true
      tags:
      - manager-settings
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MS'
          description: ''
    put:
      operationId: manager_settings_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this manager settings.
        required: true
      tags:
      - manager-settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MS'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MS'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MS'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MS'
          description: ''
    patch:
      operationId: manager_settings_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this manager settings.
        required: true
      tags:
      - manager-settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMS'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMS'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMS'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MS'
          description: ''
    delete:
      operationId: manager_settings_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this manager settings.
        required: true
      tags:
      - manager-settings
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/nodes/:
    get:
      operationId: nodes_list
      tags:
      - nodes
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nodes'
          description: ''
    post:
      operationId: nodes_create
      tags:
      - nodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Nodes'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Nodes'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Nodes'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nodes'
          description: ''
  /api/nodes/{id}/:
    get:
      operationId: nodes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nodes.
        required: true
      tags:
      - nodes
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nodes'
          description: ''
    put:
      operationId: nodes_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nodes.
        required: true
      tags:
      - nodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Nodes'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Nodes'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Nodes'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nodes'
          description: ''
    patch:
      operationId: nodes_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nodes.
        required: true
      tags:
      - nodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNodes'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNodes'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNodes'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nodes'
          description: ''
    delete:
      operationId: nodes_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nodes.
        required: true
      tags:
      - nodes
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    ConnectionStatusEnum:
      enum:
      - Connected
      - Disconnected
      type: string
      description: |-
        * `Connected` - Connected
        * `Disconnected` - Disconnected
    GpuPartitionEnum:
      enum:
      - Slow
      - Normal
      - Fast
      type: string
      description: |-
        * `Slow` - Slow
        * `Normal` - Normal
        * `Fast` - Fast
    Gpus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        'no':
          type: integer
          nullable: true
        gpu_uuid:
          type: string
          nullable: true
        node_id:
          type: integer
        brand_name:
          type: string
          nullable: true
        gpu_speed:
          $ref: '#/components/schemas/GpuPartitionEnum'
        gpu_util:
          type: string
          nullable: true
        is_running_amumax:
          type: string
          nullable: true
        gpu_info:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusD12Enum'
        last_update:
          type: string
          format: date-time
          nullable: true
        job_id:
          type: integer
          nullable: true
        gpu_speed_display:
          type: string
          readOnly: true
        status_display:
          type: string
          readOnly: true
      required:
      - gpu_speed_display
      - id
      - node_id
      - status_display
    Job:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          nullable: true
          maxLength: 100
        path:
          type: string
          nullable: true
          maxLength: 500
        node_name:
          type: string
          nullable: true
          maxLength: 100
        port:
          type: integer
          nullable: true
        submit_time:
          type: string
          format: date-time
          nullable: true
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        error_time:
          type: string
          format: date-time
          nullable: true
        priority:
          $ref: '#/components/schemas/GpuPartitionEnum'
        gpu_partition:
          $ref: '#/components/schemas/GpuPartitionEnum'
        est:
          type: string
          nullable: true
          maxLength: 100
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        assigned_node_id:
          type: string
          nullable: true
          maxLength: 10
        assigned_gpu_id:
          type: string
          nullable: true
          maxLength: 10
        output:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
        flags: {}
      required:
      - id
    JobStatusEnum:
      enum:
      - Waiting
      - Pending
      - Running
      - Finished
      - Interrupted
      type: string
      description: |-
        * `Waiting` - Waiting
        * `Pending` - Pending
        * `Running` - Running
        * `Finished` - Finished
        * `Interrupted` - Interrupted
    MS:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        queue_watchdog:
          type: boolean
      required:
      - id
    Nodes:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        ip:
          type: string
          maxLength: 15
        name:
          type: string
          nullable: true
          maxLength: 15
        port:
          type: integer
          nullable: true
        number_of_gpus:
          type: string
          nullable: true
          maxLength: 15
        gpu_info:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusD12Enum'
        connection_status:
          $ref: '#/components/schemas/ConnectionStatusEnum'
        last_seen:
          type: string
          format: date-time
          nullable: true
        status_display:
          type: string
          readOnly: true
        connection_status_display:
          type: string
          readOnly: true
      required:
      - connection_status_display
      - id
      - ip
      - status_display
    PatchedJob:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          nullable: true
          maxLength: 100
        path:
          type: string
          nullable: true
          maxLength: 500
        node_name:
          type: string
          nullable: true
          maxLength: 100
        port:
          type: integer
          nullable: true
        submit_time:
          type: string
          format: date-time
          nullable: true
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        error_time:
          type: string
          format: date-time
          nullable: true
        priority:
          $ref: '#/components/schemas/GpuPartitionEnum'
        gpu_partition:
          $ref: '#/components/schemas/GpuPartitionEnum'
        est:
          type: string
          nullable: true
          maxLength: 100
        status:
          $ref: '#/components/schemas/JobStatusEnum'
        assigned_node_id:
          type: string
          nullable: true
          maxLength: 10
        assigned_gpu_id:
          type: string
          nullable: true
          maxLength: 10
        output:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
        flags: {}
    PatchedMS:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        queue_watchdog:
          type: boolean
    PatchedNodes:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        ip:
          type: string
          maxLength: 15
        name:
          type: string
          nullable: true
          maxLength: 15
        port:
          type: integer
          nullable: true
        number_of_gpus:
          type: string
          nullable: true
          maxLength: 15
        gpu_info:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusD12Enum'
        connection_status:
          $ref: '#/components/schemas/ConnectionStatusEnum'
        last_seen:
          type: string
          format: date-time
          nullable: true
        status_display:
          type: string
          readOnly: true
        connection_status_display:
          type: string
          readOnly: true
    StatusD12Enum:
      enum:
      - Waiting
      - Running
      - Reserved
      - Unavailable
      type: string
      description: |-
        * `Waiting` - Waiting
        * `Running` - Running
        * `Reserved` - Reserved
        * `Unavailable` - Unavailable
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
